services:
  # PostgreSQL Database with PostGIS
  db:
    image: postgis/postgis:16-3.4-alpine
    environment:
      POSTGRES_DB: infobus
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery and Channels
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Web App (Production with Daphne)
  web:
    build:
      context: .
      target: production
    env_file:
      - .env.prod
      - .env.local
    environment:
      # Docker-specific environment variables that override env_file values if needed
      - DB_HOST=db # Docker service name
      - REDIS_HOST=redis # Docker service name
      # Production optimizations
      - PYTHONUNBUFFERED=1 # Ensure Python output is not buffered
      - PYTHONDONTWRITEBYTECODE=1 # Prevent Python from writing .pyc files
      # GDAL library path for ARM64 architecture
      - GDAL_LIBRARY_PATH=/usr/lib/aarch64-linux-gnu/libgdal.so
      - GEOS_LIBRARY_PATH=/usr/lib/aarch64-linux-gnu/libgeos_c.so
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      # Remove the source code mount for production
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    entrypoint: ["/app/docker-entrypoint.sh"]
    command:
      [
        "uv",
        "run",
        "daphne",
        "-b",
        "0.0.0.0",
        "-p",
        "8000",
        "--proxy-headers",
        "datahub.asgi:application",
      ]

  # Celery Worker (Production)
  celery-worker:
    build:
      context: .
      target: production
    env_file:
      - .env.prod
      - .env.local
    environment:
      # Docker-specific environment variables
      - DB_HOST=db # Docker service name
      - REDIS_HOST=redis # Docker service name
      # Production optimizations
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      # GDAL library path for ARM64 architecture
      - GDAL_LIBRARY_PATH=/usr/lib/aarch64-linux-gnu/libgdal.so
      - GEOS_LIBRARY_PATH=/usr/lib/aarch64-linux-gnu/libgeos_c.so
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_started
    entrypoint: ["/app/docker-entrypoint.sh"]
    command:
      ["uv", "run", "celery", "-A", "datahub", "worker", "--loglevel=info"]

  # Celery Beat (Production)
  celery-beat:
    build:
      context: .
      target: production
    env_file:
      - .env.prod
      - .env.local
    environment:
      # Docker-specific environment variables
      - DB_HOST=db # Docker service name
      - REDIS_HOST=redis # Docker service name
      # Production optimizations
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      # GDAL library path for ARM64 architecture
      - GDAL_LIBRARY_PATH=/usr/lib/aarch64-linux-gnu/libgdal.so
      - GEOS_LIBRARY_PATH=/usr/lib/aarch64-linux-gnu/libgeos_c.so
    volumes:
      - celery_beat_data:/app/celerybeat-schedule
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_started
    entrypoint: ["/app/docker-entrypoint.sh"]
    command:
      [
        "uv",
        "run",
        "celery",
        "-A",
        "datahub",
        "beat",
        "--loglevel=info",
        "--scheduler=django_celery_beat.schedulers:DatabaseScheduler",
      ]

  # Nginx (Production) - Updated with SSL support
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_volume:/var/www/static:ro
      - media_volume:/var/www/media:ro
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      # SSL certificates (shared with certbot)
      - ssl_certs:/etc/nginx/ssl:ro
      # Certbot webroot for domain validation
      - certbot_webroot:/var/www/certbot
    depends_on:
      web:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - production

  # Certbot service for SSL certificate management
  certbot:
    image: certbot/certbot:latest
    profiles:
      - production
      - ssl
    environment:
      - SSL_DOMAIN=${SSL_DOMAIN:-infobus.bucr.digital}
      - SSL_EMAIL=${SSL_EMAIL:-admin@infobus.bucr.digital}
      - SSL_STAGING=${SSL_STAGING:-false}
    volumes:
      # Let's Encrypt certificates and configuration
      - letsencrypt_data:/etc/letsencrypt
      - letsencrypt_logs:/var/log/letsencrypt
      # Webroot for domain validation (shared with nginx)
      - certbot_webroot:/var/www/certbot
      # SSL directory shared with nginx
      - ssl_certs:/etc/nginx/ssl
      # Renewal script
      - ./certbot/renew.sh:/usr/local/bin/renew.sh:ro
    command: /bin/sh -c "chmod +x /usr/local/bin/renew.sh && /usr/local/bin/renew.sh"
    depends_on:
      - nginx
    restart: "no"  # Only run when explicitly started

  # Certbot renewal cron service
  certbot-cron:
    image: certbot/certbot:latest
    profiles:
      - production
      - ssl
      - cron
    environment:
      - SSL_DOMAIN=${SSL_DOMAIN:-infobus.bucr.digital}
      - SSL_EMAIL=${SSL_EMAIL:-admin@infobus.bucr.digital}
      - SSL_STAGING=${SSL_STAGING:-false}
    volumes:
      # Let's Encrypt certificates and configuration
      - letsencrypt_data:/etc/letsencrypt
      - letsencrypt_logs:/var/log/letsencrypt
      # Webroot for domain validation
      - certbot_webroot:/var/www/certbot
      # SSL directory shared with nginx
      - ssl_certs:/etc/nginx/ssl
      # Renewal script
      - ./certbot/renew.sh:/usr/local/bin/renew.sh:ro
    # Run certificate renewal check twice daily (recommended by Let's Encrypt)
    command: /bin/sh -c "
      echo '0 */12 * * * /usr/local/bin/renew.sh >> /var/log/cron.log 2>&1' | crontab - &&
      chmod +x /usr/local/bin/renew.sh &&
      echo 'Starting certbot cron daemon...' &&
      crond -f -l 2"
    depends_on:
      - nginx
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  celery_beat_data:
  # SSL-related volumes
  letsencrypt_data:
    driver: local
  letsencrypt_logs:
    driver: local
  certbot_webroot:
    driver: local
  ssl_certs:
    driver: local

networks:
  default:
    name: infobus_network
